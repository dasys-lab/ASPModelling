## Iterate over all constants
// Constants used in the Asp-program
#foreach($c in $constants)
#declareConstant($c)

#end

## Iterate over all ranges
// Ranges used in the Asp-program
#foreach($r in $ranges)
#declareRange($r)

#end

## Iterate over all variables
// Variables used in the Asp-program
#foreach($v in $variables)
#declareVariable($v)

#end

## Iterate over all predicates
// Predicates used in the Asp-program
#foreach($p in $predicates)
#declarePredicate($p)

#end

## Iterate over all choices
// Choices used in the Asp-program
#foreach($c in $choices)
#declareChoice($c)

#end

## Iterate over all conditional literals
// ConditionalLiterals in the Asp-program
#foreach($cl in $conditionalLiterals)
#declareConditionalLiteral($cl)

#end

## Iterate over all rules
// Rules, that are part of the Asp-program
#foreach($r in $rules)
#declareRule($r)

#end

## Create model
// The final model
AspGenerator gen = new AspGenerator()##
#if($facts && !$facts.isEmpty())

    .withFacts(#list($facts))##
#end
#if($rules && !$rules.isEmpty())

    .withRules(#list($rules))##
#end
;##

## Macro for declaring one constant
#macro(declareConstant $c)
Constant $AspGenerator.createJavaCodeName($c) = new Constant().withName("$c.getName()");##
#end

## Macro for declaring one range
#macro(declareRange $r)
Range $AspGenerator.createJavaCodeName($r) = new Range()
    .withMin($r.getMin())
    .withMax($r.getMax());##
#end

## Macro for declaring one variable
#macro(declareVariable $v)
Variable $AspGenerator.createJavaCodeName($v) = new Variable().withName("$v.getName()");##
#end

## Macro for declaring one predicate
#macro(declarePredicate $p)
Predicate $AspGenerator.createJavaCodeName($p) = new Predicate().withName("$p.getName()")##
#if($p.isWithNot())

    .withNot()##
#end
#if($p.isWithFalse())

    .withFalse()##
#end
#if(!$p.getElements().isEmpty()) ## Newline to make it look nicer

    .withElements(#list($p.getElements()))##
#end
;##
#end

## Macro for declaring one choice
#macro(declareChoice $c)
Choice $AspGenerator.createJavaCodeName($c) = new Choice()##
#if($c.getLowerBound().isPresent() && $c.getLowerBound().equals($c.getUpperBound()))

    .withExact($c.getLowerBound().getAsInt())##
#else
#if($c.getLowerBound().isPresent())

    .withLowerBound($c.getLowerBound().getAsInt())##
#end
#if($c.getUpperBound().isPresent())

    .withUpperBound($c.getUpperBound().getAsInt())##
#end
#end
#if(!$c.getPredicates().isEmpty())

    .withPredicates(#list($c.getPredicates()))##
#end
;##
#end

## Macro for declaring one conditional literal
#macro(declareConditionalLiteral $cl)
ConditionalLiteral $AspGenerator.createJavaCodeName($cl) = new ConditionalLiteral()
    .withConditional($AspGenerator.createJavaCodeName($cl.getConditional()))
    .withConditions(#list($cl.getConditions()));
#end

## Macro for declaring one rule
#macro(declareRule $r)
Rule $AspGenerator.createJavaCodeName($r) = new Rule()##
#if($r.getHead() && !$r.getHead().getPredicateTerms().isEmpty())

    .withHead(new Head().withPredicates(#list($r.getHead().getPredicateTerms())))##
#end
#if($r.getBody() && !$r.getBody().getPredicateTerms().isEmpty())

    .withBody(new Body().withPredicates(#list($r.getBody().getPredicateTerms())))##
#end
;##
#end

## Macro for a comma-separated list of objects
#macro(list $os)
#set($separator = "")## No comma before first object
#foreach ($o in $os)##
$separator##
$AspGenerator.createJavaCodeName($o)##
#set($separator = ", ")##
#end
#end