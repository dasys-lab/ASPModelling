## Iterate over all facts
#foreach($fact in $facts)
#fact($fact)

#end

## Iterate over all rules
#foreach($rule in $rules)
#if($rule.getType() == $Fact)
#terms($rule.getHead().getPredicateTerms()).
#elseif($rule.getType() == $Constraint)
:- #terms($rule.getBody().getPredicateTerms())#outOfRange($rule.getBody()).
#else
#terms($rule.getHead().getPredicateTerms()) :- #terms($rule.getBody().getPredicateTerms())#outOfRange($rule.getBody()).
#end
#end

## Macro for multiple elements, seperated by ','
#macro(elements $es)
#set($separator = "")## No comma before first element
#foreach ($e in $es)##
$separator##
#element($e)##
#set($separator = ", ")##
#end
#end

## Macro for single Element
#macro (element $e)
$e.getName()##
#end

## Macro for multiple predicate terms, separated by ','
#macro(terms $ts)
#set($separator = "")## No comma before first element
#foreach($t in $ts)
#if(!$t.getName())## Choices and conditional literal don't have names
#if($t.getLowerBound())## Only choices have lower bounds
$separator##
#choice($t)
#set($separator = ", ")## Comma before all following elements
#else## Must be conditional literal
#if($separator && !$separator.isEmpty())
; ## Use semicolon instead of comma
#end
#conditional($t)
#set($separator = "; ")## Semicolon before next element
#end
#else
$separator##
#predicate($t)
#set($separator = ", ")## Comma before all following elements
#end
#end
#end

## Macro for a single predicate
#macro(predicate $p)
#if($p.isWithNot())
not ##
#end
#if($p.isWithFalse())
-##
#end
$p.getName()##
#if(!$p.getElements().isEmpty())
(#elements($p.getElements()))##
#end
#end

## Macro for a choice
#macro(choice $c)
$c.getLowerBoundString(){##
#set($separator = "")## No semicolon before first element
#foreach($p in $c.getPredicates())
$separator##
#if(!$p.getName())## Choices and conditional literal don't have names
#if($p.getLowerBound())## Only choices have lower bounds
#choice($p)
#else## Must be conditional literal
#conditional($p)
#end
#else
#predicate($p)
#end
#set($separator = "; ")## Semicolon before all following elements
#end
}$c.getUpperBoundString()##
#end

## Macro for a conditional literal
#macro(conditional $cl)
#predicate($cl.getConditional()) : ##
#set($separator = "")## No comma before first element
#foreach($c in $cl.getConditions())
$separator##
#predicate($c)##
#set($separator = ", ")## Comma before all following elements
#end
#end

## Macro for values variables should not take
#macro(outOfRange $b)
#foreach($v in $AspGenerator.extractVariables($b))
#foreach($c in $v.getConstantsOutOfValueRange())
, $v.getName() != $c.getName()##
#end
#end
#end